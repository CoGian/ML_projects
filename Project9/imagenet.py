# -*- coding: utf-8 -*-
"""ImageNet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NuvdB_7KBZfGrQmnXh-SKpKzsbviKwL_
"""

# import the necessary packages
from keras.preprocessing import image as image_utils
from keras.applications.imagenet_utils import decode_predictions
from keras.applications.imagenet_utils import preprocess_input
from keras.applications import VGG16, ResNet50
import numpy as np
import os
import pandas as pd

class ImageNetModel:
  def __init__(self, model_name):

    if model_name == "VGG16":
      self.model = VGG16(weights="imagenet")
    elif model_name == "ResNet50":
      self.model = ResNet50(weights="imagenet")

  def predict_image(self, image, image_name):
    # classify the image
    print("[INFO] classifying image...")
    preds = self.model.predict(image)
    P = decode_predictions(preds)
    # loop over the predictions and display the rank-1 predictions
    res = {}
    for (i, (imagenetID, label, prob)) in enumerate(P[0]):
      print("{}. {}: {:.2f}%".format(i + 1, label, prob * 100))
      res[label] = prob

    pd.DataFrame([res]).T.to_csv(image_name.split('.')[0] + ".csv", header=False)

def load_and_ppreprocessing_image(image_data_path, model_name):
  print("[INFO] loading and preprocessing image...")
  if model_name == "Xception":
    image = image_utils.load_img(image_data_path, target_size=(299, 299))
  else:
    image = image_utils.load_img(image_data_path, target_size=(224, 224))
  image = image_utils.img_to_array(image)
  image = np.expand_dims(image, axis=0)
  image = preprocess_input(image)

  return image

"""# VGG16"""

model_name = "VGG16"
clf = ImageNetModel(model_name)
print(model_name)

"""## Jake"""

path = "Jake"
images = {image:load_and_ppreprocessing_image(os.path.join(path, image), model_name)
          for image in os.listdir(path)}

for image_name, image in images.items(): 
  print(image_name)
  clf.predict_image(image, image_name)

"""## Fred"""

path = "Fred"
images = {image:load_and_ppreprocessing_image(os.path.join(path, image), model_name)
          for image in os.listdir(path)}

for image_name, image in images.items(): 
  print(image_name)
  clf.predict_image(image, image_name)

"""## Ermis"""

path = "Ermis"
images = {image:load_and_ppreprocessing_image(os.path.join(path, image), model_name)
          for image in os.listdir(path)}

for image_name, image in images.items(): 
  print(image_name)
  clf.predict_image(image, image_name)

"""# ResNet50"""

model_name = "ResNet50"
clf = ImageNetModel(model_name)
print(model_name)

"""## Jake"""

path = "Jake"
images = {image:load_and_ppreprocessing_image(os.path.join(path, image), model_name)
          for image in os.listdir(path)}

for image_name, image in images.items():
  print(image_name)
  clf.predict_image(image, image_name)

"""## Fred"""

path = "Fred"
images = {image:load_and_ppreprocessing_image(os.path.join(path, image), model_name)
          for image in os.listdir(path)}

for image_name, image in images.items():
  print(image_name)
  clf.predict_image(image, image_name)

"""## Ermis"""

path = "Ermis"
images = {image:load_and_ppreprocessing_image(os.path.join(path, image), model_name)
          for image in os.listdir(path)}

for image_name, image in images.items():
  print(image_name)
  clf.predict_image(image, image_name)

